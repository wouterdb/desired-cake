import cooking

entity CitroenTaart:
end

entity BoterDeeg:

end

entity CitroenCreme:

end

implement CitroenTaart using citroen_taart_recept
implement BoterDeeg using boterdeeg
implement CitroenCreme using citroencreme

implementation boterdeeg for BoterDeeg:
    d1.requires += self.requires
    d1 = cooking::Do(action="Zeef de bloem op het werkvlak, stooi er zout over en doe er stukjes boter bij.")
    d2 = cooking::Do(action="Wrijf de boter en bloem tussen uw handpalmen.", requires=d1)
    d3 = cooking::Do(action="Meng vanile en poedersuiker met het deeg.", requires=d2)
    d4 = cooking::Do(action="Maak een kuiltje in het midden en breek de eieren erin.", requires=d3)
    d5 = cooking::Do(action="Werk de ingredieneten met uw vingertoppen tot een zacht deeg.", requires=d4)
    d5.provides += self.provides
end

implementation citroencreme for CitroenCreme:
    v1.requires += self.requires
    v1 = cooking::Do(action="Rasp de citroenschil boven een grote kom. Voeg suiker toe. Klop de eieren en het citroensap er door.")
    v2 = cooking::Do(action="Warm op au bain marie. Blijf met een garde kloppen tot een temperatuur van 82-83 graden.", requires=v1)
    v3 = cooking::Do(action="Giet de creme door een zeef en laat roerend afkoelen tot 60. Klopt er met een staafmixer de blokjes boter door.", requires=v2)
    v3.provides += self.provides
end

implementation citroen_taart_recept for CitroenTaart:
    d1.requires += self.requires
    v1.requires += self.requires

    d1 = BoterDeeg()
    b1 = cooking::Do(action="Bak de bodem blind af.", requires=d1)

    v1 = CitroenCreme()
    v4 = cooking::Do(action="Verdeel de citroencreme over de taartbodem.", requires=[v1, b1])

    v4.provides += self.provides
end


c1 = CitroenTaart()
cooking::Do(action="Opeten!", requires=c1)
